library(readr)
customer_data <- read_csv("customer_data.csv")
View(customer_data)
library(tidyverse)
df <- read.csv('customer_data.csv')
names(df)
library(tidyverse)
df <- read.csv('customer_data.csv')
df.head([1:6])
df.head()
head(df[1:6])
head(df[1:5])
head(df[1:5])
head(df[1:5])
head(df[1:4])
head(df,5)
head(df,5)
type(head)
head(df,5)
str(head)
head(df,5)
str(head)
a=head(df,5)
str(a)
ncol(df)
nrow(df)
max.col("age")
min.col("age")
mean("age")
max(df$age)
min(df$age)
mean(df$age)
table(df$first)
asc(table(df$first))
sort(table(df$first))
sort(table(df$first), decreasing = TRUE)
sort(table(df$first), decreasing = TRUE)
full_name = paste(df$first,df$last)
sort(table(full_name), decreasing = TRUE)
full_name = paste(df$first,df$last) # merging as full name
x = sort(table(full_name), decreasing = TRUE)
head(x,3)
a = head(df,5)
unique(str(a))
a = head(df,5)
str(a)
dup_phones = table(df$phone) # counting
dup_phones = dup_phones[dup_phones>1] # updating dup_phones
df[df$phone%in%names(dup_phones)]
dup_phones = table(df$phone) # counting
dup_phones = dup_phones[dup_phones>1] # updating dup_phones
df[df$phone %in% names(dup_phones), ]
count(df$profession("Structural Engineer"))
sum(df$profession == "Structural Engineer")
sum(df$profession == "Structural Engineer" & df$gender=="Male")
sum(df$profession == "Structural Engineer" & df$gender=="Female" & df$province=="AB")
df |>
filter(profession=="Structural Engineer",
gender=="Female",
province=="AB")
df.cols
max(df$price.CAD.)    # highest amount spent
min(df$price.CAD.)    # lowest amount spent
mean(df$price.CAD.)   # average amount spent
df |>
filter(price.CAD.=="0")
df |>
filter(price.CAD.>="100")
df |>
filter(price.CAD.==0)
df |>
filter(price.CAD.>=100)
sum(df$cc_no==5020000000000230)
library(lubridate)
library(lubridate)
library(lubridate)
df$cc_exp <- ymd(df$cc_exp)
exp_year <- year(df$cc_exp)
sum(exp_year == 2019)
library(lubridate)
df$cc_exp <- ymd(df$cc_exp)
exp_year <- year(df$cc_exp)
sum(exp_year == 2019, na.rm == TRUE)
library(lubridate)
df$cc_exp <- ymd(df$cc_exp)
exp_year <- year(df$cc_exp)
sum(exp_year == 2019, na.rm = TRUE)
head(df$cc_exp, 10)
head(df$cc_exp, 10)
head(df$cc_exp, 10)
df$cc_exp_raw <- df$cc_exp_original  # if you have backup
head(df$cc_exp_raw, 10)
library(lubridate)
# Step 1: Add a day at the beginning so format becomes "01/12/2028"
df$cc_exp_fixed <- paste0("01/", df$cc_exp)
# Step 2: Parse it as a date using dmy()
df$cc_exp_fixed <- dmy(df$cc_exp_fixed)
# Step 3: Extract year and count how many expire in 2019
sum(year(df$cc_exp_fixed) == 2019, na.rm = TRUE)
library(lubridate)
# Step 1: Extract month and year from the string
split_exp <- strsplit(df$cc_exp, "/")
month_part <- sapply(split_exp, `[`, 1)
year_part <- sapply(split_exp, `[`, 2)
# Step 2: Build a proper date string "YYYY-MM-01"
date_string <- paste0(year_part, "-", month_part, "-01")
# Step 3: Convert to Date
df$cc_exp_fixed <- ymd(date_string)
# Step 4: Count cards expiring in 2019
sum(year(df$cc_exp_fixed) == 2019, na.rm = TRUE)
library(lubridate)
# Step 1: Reload raw column if needed
# Assuming your original column was named cc_exp and it got overwritten,
# you can re-import or convert it back to character manually:
df$cc_exp <- as.character(df$cc_exp)
# Step 2: Split month/year strings
split_exp <- strsplit(df$cc_exp, "/")
month_part <- sapply(split_exp, `[`, 1)
year_part <- sapply(split_exp, `[`, 2)
# Step 3: Build ISO-format string "YYYY-MM-01"
date_string <- paste0(year_part, "-", month_part, "-01")
# Step 4: Convert to proper Date
df$cc_exp_fixed <- ymd(date_string)
# Step 5: Count how many cards expire in 2019
sum(year(df$cc_exp_fixed) == 2019, na.rm = TRUE)
library(lubridate)
# Step 1: Convert cc_exp to Date using my()
df$cc_exp_fixed <- my(df$cc_exp)
# Step 2: Extract year and count how many cards expire in 2019
sum(year(df$cc_exp_fixed) == 2019, na.rm = TRUE)
library(lubridate)
# Step 1: Convert cc_exp to Date using my()
df$cc_exp_fixed <- my(df$cc_exp)  # This is fine
# Step 2: Extract year and count how many cards expire in 2019
sum(year(df$cc_exp_fixed) == 2019, na.rm = TRUE)  # FIXED: remove hidden special characters
library(lubridate)  # Load date-handling functions
df$cc_exp_fixed <- my(df$cc_exp)
# Converts values like "07/2019" to "2019-07-01"
sum(year(df$cc_exp_fixed) == 2019, na.rm = TRUE)
# Extracts year from the date and counts how many are equal to 2019
# na.rm = TRUE ensures NA values are ignored in the count
library(lubridate)  # Load date-handling functions
df$cc_exp_fixed <- my(df$cc_exp)
# Converts values like "07/2019" to "2019-07-01"
sum(year(df$cc_exp_fixed) == 2019, na.rm = TRUE)
# Extracts year from the date and counts how many are equal to 2019
# na.rm = TRUE ensures NA values are ignored in the count
library(tidyverse)
df <- read.csv('customer_data.csv')
a = head(df,5)
str(a)
ncol(df)
nrow(df)
max(df$age)
min(df$age)
mean(df$age)
full_name = paste(df$first,df$last) # merging as full name
x = sort(table(full_name), decreasing = TRUE)
head(x,3)
dup_phones = table(df$phone) # counting
dup_phones = dup_phones[dup_phones>1] # updating dup_phones
df[df$phone %in% names(dup_phones), ]
# Select all rows from the data frame where the phone number is duplicated.
# The comma is used to include all columns in the result.
sum(df$profession == "Structural Engineer") # can use dplyr too and also filter()
sum(df$profession == "Structural Engineer" & df$gender=="Male")
df |>
filter(profession=="Structural Engineer",
gender=="Female",
province=="AB")
max(df$price.CAD.)    # highest amount spent
min(df$price.CAD.)    # lowest amount spent
mean(df$price.CAD.)   # average amount spent
df |>
filter(price.CAD.==0)
df |>
filter(price.CAD.>=100)
sum(df$cc_no==5020000000000230)
library(lubridate)  # Load date-handling functions
df$cc_exp_fixed <- my(df$cc_exp)
# Converts values like "07/2019" to "2019-07-01"
sum(year(df$cc_exp_fixed) == 2019, na.rm = TRUE)
# Extracts year from the date and counts how many are equal to 2019
# na.rm = TRUE ensures NA values are ignored in the count
# use stringr::str_extract() to extract email providers
# Try learning new things!!
# use stringr::str_detect() to find customers with "am.edu" in their email.
# Convert the 'date' to Date type and extract the day of the week
library(lubridate)
# Step 1: Convert cc_exp to Date using my()
df$cc_exp_fixed <- my(df$cc_exp)
# Step 2: Extract year and count how many cards expire in 2019
sum(year(df$cc_exp_fixed) == 2019, na.rm = TRUE)
df |>
filter(cc_type=="Visa")
df |>
filter(cc_type=="Visa")
count()
df |>
filter(cc_type=="Visa") |>
count()
df |>
filter(cc_type=="Visa",price.CAD.==100)|>
count()
df |>
filter(cc_type=="Visa",price.CAD.==100)
sort(table("professions"),decreasing = TRUE)
x=sort(table("professions"),decreasing = TRUE)
head(x,3)
library(dplyr)
df |>
count(profession, sort = TRUE)
library(dplyr)
df |>
count(profession, sort = TRUE)|>
head(2)
library(stringr)
library(dplyr)
# Step 1: Extract domain from email
df$email_provider <- str_extract(df$email, "(?<=@)[^\\s]+")  # gets part after @
# Step 2: Count and sort
df |>
count(email_provider, sort = TRUE) |>
head(5)
library(stringr)
library(dplyr)
# Extract domain from email
df$email_provider <- str_extract(df$email, "@")  # gets part after @
# Count and sort
df |>
count(email_provider, sort = TRUE) |>
head(5)
library(stringr)
library(dplyr)
# Extract domain from email
df$email_provider <- str_extract(df$email, "(?<=@)[^\\s]+")  # gets part after @
# Count and sort
df |>
count(email_provider, sort = TRUE) |>
head(5)
library(stringr)
# Split by "@" and take the second part
df$email_provider <- str_split_fixed(df$email, "@", 2)[, 2]
library(stringr)
# Split by "@" and take the second part
df$email_provider <- str_split_fixed(df$email, "@", 2)[, 2]
library(stringr)
# Check if any email contains "am.edu"
any(str_detect(df$email, "am\\.edu"))
library(stringr)
# Check if any email contains "am.edu"
any(str_detect(df$email, "am\\.edu"))
df[str_detect(df$email, "am\\.edu"), c("first", "last", "email")]
library(stringr)
df[str_detect(df$email, "am\\.edu"), c("first", "last", "email")]
library(stringr)
df[str_detect(df$email, "am.edu"), c("first", "last", "email")]
library(lubridate)
library(dplyr)
# Step 1: Convert 'date' column to Date type
df$date <- ymd(df$date)  # or mdy(df$date) depending on your format
# Step 2: Extract day of the week
df$weekday <- wday(df$date, label = TRUE)  # Gives labeled weekdays like Mon, Tue, etc.
# Step 3: Count customers per weekday
df %>%
count(weekday, sort = TRUE)
library(lubridate)
library(dplyr)
# Step 1: Add a day so it becomes "01/07/2024"
df$date_fixed <- paste0("01/", df$date)
# Step 2: Parse using dmy()
df$date_fixed <- dmy(df$date_fixed)
# Step 3: Extract weekday
df$weekday <- wday(df$date_fixed, label = TRUE)
# Step 4: Count number of customers per weekday
df %>%
count(weekday, sort = TRUE)
library(tidyverse)
df <- read.csv('customer_data.csv')
a = head(df,5)
str(a)
ncol(df)
nrow(df)
max(df$age)
min(df$age)
mean(df$age)
full_name = paste(df$first,df$last) # merging as full name
x = sort(table(full_name), decreasing = TRUE)
head(x,3)
dup_phones = table(df$phone) # counting
dup_phones = dup_phones[dup_phones>1] # updating dup_phones
df[df$phone %in% names(dup_phones), ]
# Select all rows from the data frame where the phone number is duplicated.
# The comma is used to include all columns in the result.
sum(df$profession == "Structural Engineer") # can use dplyr too and also filter()
sum(df$profession == "Structural Engineer" & df$gender=="Male")
df |>
filter(profession=="Structural Engineer",
gender=="Female",
province=="AB")
max(df$price.CAD.)    # highest amount spent
min(df$price.CAD.)    # lowest amount spent
mean(df$price.CAD.)   # average amount spent
df |>
filter(price.CAD.==0)
df |>
filter(price.CAD.>=100)
sum(df$cc_no==5020000000000230)
library(lubridate)
# Convert cc_exp to Date using my()
df$cc_exp_fixed <- my(df$cc_exp)
# Extract year and count how many cards expire in 2019
sum(year(df$cc_exp_fixed) == 2019, na.rm = TRUE)
df |>
filter(cc_type=="Visa") |>
count()
df |>
filter(cc_type=="Visa",price.CAD.==100)
library(dplyr)
df |>
count(profession, sort = TRUE)|>
head(2)
library(stringr)
library(dplyr)
# Extract domain from email
df$email_provider <- str_extract(df$email, "(?<=@)[^\\s]+")  # regex. Extract everything after the @ in an email address, until the end (or next whitespace).
# Count and sort
df |>
count(email_provider, sort = TRUE) |>
head(5)
library(stringr)
df[str_detect(df$email, "am.edu"), c("first", "last", "email")]
library(lubridate)
library(dplyr)
# Step 1: Add a day so it becomes "01/07/2024"
df$date_fixed <- paste0("01/", df$date)
# Step 2: Parse using dmy()
df$date_fixed <- dmy(df$date_fixed)
# Step 3: Extract weekday
df$weekday <- wday(df$date_fixed, label = TRUE)
# Step 4: Count number of customers per weekday
df %>%
count(weekday, sort = TRUE)
# Convert the 'date' to Date type and extract the day of the week
library(lubridate)
df |>
mutate(date_parsed = mdy(date)) |>                        # Convert 'date' string to Date object
mutate(day_of_week = wday(date_parsed, label = TRUE)) |>  # Extract weekday name (Mon, Tue...)
count(day_of_week, sort = TRUE)                           # Count customers per weekday
# Convert the 'date' to Date type and extract the day of the week
library(lubridate)
df |>
mutate(date_parsed = mdy(date)) |>                        # Convert 'date' string to Date object
mutate(day_of_week = wday(date_parsed, label = TRUE)) |>  # Extract weekday name (Mon, Tue...)
count(day_of_week, sort = TRUE) |>
head(1)# Count customers per weekday
